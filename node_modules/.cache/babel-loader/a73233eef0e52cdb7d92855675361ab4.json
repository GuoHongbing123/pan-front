{"remainingRequest":"E:\\vue\\test\\node_modules\\babel-loader\\lib\\index.js!E:\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue\\test\\src\\components\\Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue\\test\\src\\components\\Upload.vue","mtime":1639068806564},{"path":"E:\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgaGV4X21kNSB9IGZyb20gIi4uL3V0aWxzL21kNSI7CmltcG9ydCBUb29sIGZyb20gJy4uL3V0aWxzL3Rvb2wnOwppbXBvcnQgeyBjaGVja0ZpbGVLZXkgfSBmcm9tICIuLi9hcGkvdXBsb2FkIjsKaW1wb3J0IHsgc2hhcmRVcGxvYWQgYXMgX3NoYXJkVXBsb2FkIH0gZnJvbSAiLi4vYXBpL3VwbG9hZCI7CmV4cG9ydCBkZWZhdWx0IHsKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbGlzdDogW10KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlJyk7CiAgICB9LAogICAgaGFuZGxlVXBsb2FkOiBmdW5jdGlvbiBoYW5kbGVVcGxvYWQoZmlsZXMpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykgewogICAgICAgIHRoaXMubGlzdC5wdXNoKHsKICAgICAgICAgIG5hbWU6IGZpbGVzW2ldLm5hbWUsCiAgICAgICAgICBwcm9jZXNzOiAwLAogICAgICAgICAgc3RhdHVzOiAwLAogICAgICAgICAgLy8wIOWHhuWkh+S4rSAxIOajgOmqjE1ENUtleSAyIOS4iuS8oOS4rSAzIOW3suS4iuS8oCA0IOenkuS8oOaIkOWKnyA1IOW3suWPlua2iCA2IOW3suWtmOWcqAogICAgICAgICAgZmlsZTogZmlsZXNbaV0KICAgICAgICB9KTsKICAgICAgICB0aGlzLnN0YXJ0VXBsb2FkKHRoaXMubGlzdC5sZW5ndGggLSAxKTsKICAgICAgfQogICAgfSwKICAgIHN0YXJ0VXBsb2FkOiBmdW5jdGlvbiBzdGFydFVwbG9hZChpbmRleCkgewogICAgICAvKm1kNS0+5ZCO56uvIOWIpOaWrei/meS4quaWh+S7tuaYr+WQpuWtmOWcqCBrZXkNCiAgICAgIOWtmOWcqOeahOivnSDnp5LkvKANCiAgICAgIOS4jeWtmOWcqOeahOivnSDliIbniYfkuIrkvKAtPiDlsIbmlofku7bovazljJbmiJBiYXNlNjQg5YiH5Ymy6YCQ5Liq6LCD5o6l5Y+j5LiK5LygDQogICAgICDlpoLmnpzkuIrkvKDpgJTkuK3kuK3mlq0gIOmCo+S5iOWGjeasoeS4iuS8oOivpeaWh+S7tiDmlq3ngrnnu63kvKANCiAgICAgICovCiAgICAgIHZhciBmaWxlID0gdGhpcy5saXN0W2luZGV4XTsKICAgICAgZmlsZS5zdGF0dXMgPSAxOwogICAgICB2YXIga2V5ID0gdGhpcy5nZW5LZXkoZmlsZSk7CiAgICAgIHZhciBzaGFyZFNpemUgPSAwLjUgKiAxMDI0ICogMTAyNDsgLy/ku6UwLjVNIOS4uuS4gOS4quWIhueJhwoKICAgICAgdmFyIHNpemUgPSBmaWxlLmZpbGUuc2l6ZTsKICAgICAgdmFyIHNoYXJkSW5kZXggPSAxOwogICAgICB2YXIgc2hhcmRUb3RhbCA9IE1hdGguY2VpbChzaXplIC8gc2hhcmRTaXplKTsKICAgICAgdmFyIHN1ZmZpeCA9IGZpbGUubmFtZS5zdWJzdHJpbmcoZmlsZS5uYW1lLmxhc3RJbmRleE9mKCIuIikgKyAxLCBmaWxlLm5hbWUubGVuZ3RoKS50b0xvd2VyQ2FzZSgpOwogICAgICB2YXIgcGFyYW0gPSB7CiAgICAgICAgc2hhcmRJbmRleDogc2hhcmRJbmRleCwKICAgICAgICBzaGFyZFNpemU6IHNoYXJkU2l6ZSwKICAgICAgICBzaGFyZFRvdGFsOiBzaGFyZFRvdGFsLAogICAgICAgICduYW1lJzogZmlsZS5uYW1lLAogICAgICAgIHN1ZmZpeDogc3VmZml4LAogICAgICAgIGtleToga2V5LAogICAgICAgIGluZGV4OiBpbmRleCwKICAgICAgICBzaXplOiBzaXplLAogICAgICAgIGZvbGRlcklkOiB0aGlzLiRyb3V0ZS5xdWVyeS5pZCB8fCAwCiAgICAgIH07CiAgICAgIHRoaXMuY2hlY2socGFyYW0pOwogICAgfSwKICAgIGdlbktleTogZnVuY3Rpb24gZ2VuS2V5KGZpbGUpIHsKICAgICAgdmFyIGtleSA9IGhleF9tZDUoZmlsZS5uYW1lICsgZmlsZS5zaXplICsgZmlsZS50eXBlKTsKICAgICAgdmFyIGtleTEwID0gcGFyc2VJbnQoa2V5LCAxNik7CiAgICAgIHJldHVybiBUb29sLl8xMHRvNjIoa2V5MTApOwogICAgfSwKICAgIGNoZWNrOiBmdW5jdGlvbiBjaGVjayhwYXJhbSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgY2hlY2tGaWxlS2V5KHsKICAgICAgICBuYW1lOiBwYXJhbS5uYW1lLAogICAgICAgIGZvbGRlcklkOiBwYXJhbS5mb2xkZXJJZCwKICAgICAgICBrZXk6IHBhcmFtLmtleQogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgY3VucmVuRmlsZSA9IF90aGlzLmxpc3RbcGFyYW0uaW5kZXhdOyAvLyAwIOenkuS8oOaIkOWKn++8iOWtmOWcqOivpeaWh+S7tu+8iTIwMiDkuYvliY3mnKrkuIrkvKDlrozmlbQg6ZyA6KaB5pat54K557ut5LygICA0MDQg5pyq5a2Y5Zyo6K+l5paH5Lu2CgogICAgICAgIHN3aXRjaCAocmVzLmNvZGUpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY3VucmVuRmlsZS5zdGF0dXMgPSA0OwogICAgICAgICAgICBjdW5yZW5GaWxlLnByb2Nlc3MgPSAxMDA7CgogICAgICAgICAgICBfdGhpcy4kYnVzLiRlbWl0KCdnZXRsaXN0Jyk7CgogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDIwMjoKICAgICAgICAgICAgY3VucmVuRmlsZS5zdGF0dXMgPSAyOwogICAgICAgICAgICBwYXJhbS5zaGFyZEluZGV4ID0gcmVzLmRhdGEuc2hhcmRJbmRleDsKCiAgICAgICAgICAgIF90aGlzLnNoYXJkVXBsb2FkKHBhcmFtKTsKCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNDA0OgogICAgICAgICAgICBjdW5yZW5GaWxlLnN0YXR1cyA9IDI7CgogICAgICAgICAgICBfdGhpcy5zaGFyZFVwbG9hZChwYXJhbSk7CgogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBjdW5yZW5GaWxlLnN0YXR1cyA9IDU7CgogICAgICAgICAgICBfdGhpcy4kbWVzc2FnZS5lcnJvcihyZXMubXNnKTsKCiAgICAgICAgfQogICAgICB9KTsKICAgIH0sCiAgICBzaGFyZFVwbG9hZDogZnVuY3Rpb24gc2hhcmRVcGxvYWQocGFyYW0pIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgc2hhcmRJbmRleCA9IHBhcmFtLnNoYXJkSW5kZXg7CiAgICAgIHZhciBzaGFyZFRvdGFsID0gcGFyYW0uc2hhcmRUb3RhbDsKICAgICAgdmFyIHNoYXJkU2l6ZSA9IHBhcmFtLnNoYXJkU2l6ZTsKICAgICAgdmFyIGZpbGVTaGFyZCA9IHRoaXMuZ2V0RmlsZVNoYXJkKHNoYXJkSW5kZXgsIHNoYXJkU2l6ZSwgcGFyYW0uaW5kZXgpOwogICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CgogICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcGFyYW0uc2hhcmQgPSBlLnRhcmdldC5yZXN1bHQ7CgogICAgICAgIF9zaGFyZFVwbG9hZChwYXJhbSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICBpZiAocmVzLmNvZGUgPT09IDApIHsKICAgICAgICAgICAgaWYgKHNoYXJkSW5kZXggPCBzaGFyZFRvdGFsKSB7CiAgICAgICAgICAgICAgcGFyYW0uc2hhcmRJbmRleCArPSAxOwoKICAgICAgICAgICAgICBfdGhpczIuc2hhcmRVcGxvYWQocGFyYW0pOwoKICAgICAgICAgICAgICBfdGhpczIubGlzdFtwYXJhbS5pbmRleF0ucHJvY2VzcyA9IHBhcnNlSW50KCgoc2hhcmRJbmRleCAtIDEpIC8gc2hhcmRUb3RhbCAqIDEwMCkudG9GaXhlZCgyKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3RoaXMyLmxpc3RbcGFyYW0uaW5kZXhdLnN0YXR1cyA9IDM7CiAgICAgICAgICAgICAgX3RoaXMyLmxpc3RbcGFyYW0uaW5kZXhdLnByb2Nlc3MgPSAxMDA7CgogICAgICAgICAgICAgIF90aGlzMi4kYnVzLiRlbWl0KCdnZXRsaXN0Jyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlU2hhcmQpOwogICAgfSwKICAgIGdldEZpbGVTaGFyZDogZnVuY3Rpb24gZ2V0RmlsZVNoYXJkKHNoYXJkSW5kZXgsIHNoYXJkU2l6ZSwgaW5kZXgpIHsKICAgICAgdmFyIGZpbGUgPSB0aGlzLmxpc3RbaW5kZXhdLmZpbGU7CiAgICAgIHZhciBzdGFydCA9IChzaGFyZEluZGV4IC0gMSkgKiBzaGFyZFNpemU7CiAgICAgIHZhciBlbmQgPSBNYXRoLm1pbihmaWxlLnNpemUsIHN0YXJ0ICsgc2hhcmRTaXplKTsKICAgICAgcmV0dXJuIGZpbGUuc2xpY2Uoc3RhcnQsIGVuZCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-card class=\"box-card\">\r\n      <div slot=\"header\" class=\"clearfix\">\r\n          <span style=\"font-size:16px\">上传文件</span>\r\n          <el-button @click=\"close\" style=\"float:right; padding: 3px 0\" type=\"text\">关闭</el-button>\r\n      </div>\r\n      <div class=\"file-list\">\r\n        <div class=\"file-item\" v-for=\"(item,index) in list\" :key=\"index\">\r\n            <div class=\"name\">{{item.name}}</div>\r\n            <el-progress style=\"width:400px;height:35px;margin:0 20px\" :text-inside=\"true\" :stroke-width=\"26\" :percentage=\"item.process\"></el-progress>\r\n            <div class=\"status\">{{['等待中','检验md5Key','上传中','上传成功','秒传成功','已取消','已存在'][item.status]}}</div>\r\n        </div>\r\n      </div>\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nimport { hex_md5 } from \"../utils/md5\";\r\nimport Tool from '../utils/tool';\r\nimport { checkFileKey }from \"../api/upload\";\r\nimport { shardUpload } from \"../api/upload\";\r\nexport default {\r\n    data(){\r\n        return{\r\n            list:[]\r\n        }\r\n    },\r\n    methods:{\r\n        close() {\r\n            this.$emit('close')\r\n        },\r\n        handleUpload(files){\r\n            for(let i=0;i<files.length;i++){\r\n                this.list.push({\r\n                    name:files[i].name,\r\n                    process:0,\r\n                    status:0,  //0 准备中 1 检验MD5Key 2 上传中 3 已上传 4 秒传成功 5 已取消 6 已存在\r\n                    file:files[i]\r\n                })\r\n                this.startUpload(this.list.length - 1)\r\n            }\r\n        },\r\n        startUpload(index){\r\n            /*md5->后端 判断这个文件是否存在 key\r\n            存在的话 秒传\r\n            不存在的话 分片上传-> 将文件转化成base64 切割逐个调接口上传\r\n            如果上传途中中断  那么再次上传该文件 断点续传\r\n            */\r\n            let file=this.list[index]\r\n            file.status=1\r\n            let key=this.genKey(file)\r\n            let shardSize=0.5*1024*1024 //以0.5M 为一个分片\r\n            let size=file.file.size\r\n            let shardIndex=1\r\n            let shardTotal=Math.ceil(size/shardSize)\r\n            let suffix=file.name.substring(file.name.lastIndexOf(\".\")+1,file.name.length).toLowerCase()\r\n            let param={\r\n                shardIndex,\r\n                shardSize,\r\n                shardTotal,\r\n                'name':file.name,\r\n                suffix,\r\n                key,\r\n                index,\r\n                size,\r\n                folderId:this.$route.query.id || 0\r\n            }\r\n            this.check(param)\r\n        },\r\n        genKey(file){\r\n            let key=hex_md5(file.name+file.size+file.type)\r\n            let key10=parseInt(key,16)\r\n            return Tool._10to62(key10)\r\n        },\r\n        check(param){\r\n            checkFileKey({\r\n                name:param.name,\r\n                folderId:param.folderId,\r\n                key:param.key\r\n            }).then(res=>{\r\n                let cunrenFile=this.list[param.index]\r\n                // 0 秒传成功（存在该文件）202 之前未上传完整 需要断点续传  404 未存在该文件\r\n                switch(res.code){\r\n                    case 0:\r\n                        cunrenFile.status=4\r\n                        cunrenFile.process=100\r\n                        this.$bus.$emit('getlist')\r\n                        break;\r\n                    case 202:\r\n                        cunrenFile.status=2\r\n                        param.shardIndex=res.data.shardIndex\r\n                        this.shardUpload(param)\r\n                        break;\r\n                    case 404:\r\n                        cunrenFile.status=2\r\n                        this.shardUpload(param)\r\n                        break;\r\n                    default:\r\n                        cunrenFile.status=5\r\n                        this.$message.error(res.msg)\r\n                }\r\n            })\r\n        },\r\n        shardUpload(param){\r\n            let shardIndex=param.shardIndex\r\n            let shardTotal=param.shardTotal\r\n            let shardSize=param.shardSize\r\n            let fileShard=this.getFileShard(shardIndex,shardSize,param.index)\r\n            let fileReader= new FileReader()\r\n            fileReader.onload=(e)=>{\r\n                param.shard=e.target.result\r\n                shardUpload(param).then(res=>{\r\n                    if(res.code===0){\r\n                        if(shardIndex<shardTotal){\r\n                            param.shardIndex+=1\r\n                            this.shardUpload(param)\r\n                            this.list[param.index].process=parseInt(((shardIndex-1)/shardTotal*100).toFixed(2))\r\n                        }else{\r\n                            this.list[param.index].status=3\r\n                            this.list[param.index].process=100\r\n                            this.$bus.$emit('getlist')\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n           fileReader.readAsDataURL(fileShard)\r\n        },\r\n        getFileShard(shardIndex,shardSize,index){\r\n            let file=this.list[index].file\r\n            let start=(shardIndex-1)*shardSize\r\n            let end=Math.min(file.size,start+shardSize)\r\n            return file.slice(start,end)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.box-card{\r\n    width: 600px;\r\n    height: 400px;\r\n    position: fixed;\r\n    right: 20px;\r\n    bottom: 20px;\r\n    .file-list{\r\n        .file-item{\r\n            display: flex;\r\n            align-items: center;\r\n            .name{\r\n                font-size:16px;\r\n                flex: 1;\r\n                overflow: hidden;\r\n                text-overflow:ellipsis ;\r\n                white-space: nowrap;\r\n            }\r\n            .status{\r\n                margin-left: auto;\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>"],"sourceRoot":"src/components"}]}